import os
import psutil
import hashlib
import random
from typing import List, Dict, Any

# Simulated known malware hashes (for demo)
KNOWN_HASHES: Dict[str, str] = {
    "e99a18c428cb38d5f260853678922e03": "malware_sample_1",
    "ab56b4d92b40713acc5af89985d4b786": "malware_sample_2",
}


def calculate_file_hash(file_path: str) -> str | None:
    """Calculate MD5 hash of a file (simple signature check)."""
    try:
        with open(file_path, "rb") as f:
            data = f.read()
            return hashlib.md5(data).hexdigest()
    except Exception:
        return None


def scan_files(directory: str) -> List[str]:
    """Scan files for known malware signatures (demo)."""
    findings: List[str] = []
    for root, _, files in os.walk(directory):
        for f in files:
            path = os.path.join(root, f)
            file_hash = calculate_file_hash(path)
            if file_hash and file_hash in KNOWN_HASHES:
                findings.append(f"Known malware detected: {f}")
            else:
                # Simulate heuristic anomaly detection
                if random.random() < 0.001:  # small chance of suspicious file
                    findings.append(f"Suspicious file detected: {f}")
    return findings


def scan_processes() -> List[str]:
    """Scan running processes for anomalies (demo)."""
    findings: List[str] = []
    for proc in psutil.process_iter(["pid", "name", "exe"]):
        try:
            name = (proc.info.get("name") or "").lower()
            exe = proc.info.get("exe")
            # Simple heuristic: unknown executable path or suspicious name
            if exe is None or "temp" in name:
                findings.append(f"Suspicious process: {proc.info.get('name')} (PID {proc.info.get('pid')})")
        except Exception:
            continue
    return findings


def ai_anomaly_score(findings: List[str]) -> float:
    """Calculate a pseudo anomaly score based on findings count (0-1)."""
    if not findings:
        return 0.0
    score = min(1.0, len(findings) / 10.0)  # normalize to 0-1
    return round(score, 2)


def virus_scan(target_directory: str = ".") -> Dict[str, Any]:
    files_findings = scan_files(target_directory)
    proc_findings = scan_processes()
    findings = files_findings + proc_findings
    result = {
        "intent": "virus_scan",
        "result": {
            "anomaly_score": ai_anomaly_score(findings),
            "findings": findings if findings else ["No known malware detected."],
        },
    }
    return result


